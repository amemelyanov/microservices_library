version: '3'

networks:
  app-network:
    driver: bridge

volumes:
  db-data:
    driver: local
  minio-data:
    driver: local

services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper_compose
    networks:
      - app-network
    ports:
      - '2181:2181'
    expose:
      - '2181'
    environment:
      ALLOW_ANONYMOUS_LOGIN: 'yes'

  kafka:
    image: wurstmeister/kafka
    container_name: kafka_compose
    networks:
      - app-network
    ports:
      - '9092:9092'
    environment:
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_ADVERTISED_LISTENERS: OUTSIDE://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: OUTSIDE://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: OUTSIDE
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
    depends_on:
      - zookeeper
    volumes:
      - ./:/etc/kafka

  db:
    image: postgres:15.1-alpine
    container_name: postgres
    networks:
      - app-network
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=library
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    restart: unless-stopped

  minio:
    image: quay.io/minio/minio
    container_name: minio-db
    networks:
      - app-network
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9091"
    ports:
      - '9090:9090'
      - '9000:9000'
    volumes:
      - minio-data:/minio

  configserver:
    container_name: configserver
    networks:
      - app-network
    build:
      context: ./services/configserver
      dockerfile: Dockerfile
    ports:
      - "8071:8071"

  eurekaserver:
    container_name: eurekaserver
    networks:
      - app-network
    build:
      context: ./services/eurekaserver
      dockerfile: Dockerfile
    ports:
      - "8070:8070"
    depends_on:
      - configserver
    restart: on-failure

  gatewayserver:
    container_name: gatewayserver
    networks:
      - app-network
    build:
      context: ./services/gatewayserver
      dockerfile: Dockerfile
    ports:
      - "8072:8072"
    depends_on:
      - configserver
    restart: on-failure

  library-service:
    container_name: library-service
    networks:
      - app-network
    build:
      context: ./services/library-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - SERVER_PORT= 8888
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db/library
    depends_on:
      - db
      - minio
      - zookeeper
      - kafka
      - configserver
      - eurekaserver
      - gatewayserver
    restart: on-failure

  rest-service:
    container_name: rest-service
    networks:
      - app-network
    build:
      context: ./services/rest-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - db
      - minio
      - zookeeper
      - kafka
      - configserver
      - eurekaserver
      - gatewayserver
      - library-service
    restart: on-failure


# commands to run
# docker-compose up -d -- run (-d start flag in background);
# docker-compose down -- stop
# docker-compose ps -- show running processes
#  http://localhost:8080/getAllUnits
#  http://localhost:8080/getOneUnit/1